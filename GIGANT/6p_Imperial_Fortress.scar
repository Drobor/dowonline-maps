-------------------------------------------------
--[[CREDITS]]
-------------------------------------------------
-- Tunnel script by Ruosteinen
-------------------------------------------------
--[[ IMPORTS ]]
-------------------------------------------------
import("ScarUtil.scar")
import("WXPScarUtil.scar")

-------------------------------------------------
--[[ GAME SETUP ]]
-------------------------------------------------
-------------------------------------------------
--[[ON GAME SETUP]]
-------------------------------------------------
g_Player1 = World_GetPlayerAt(0)
g_Player2 = World_GetPlayerAt(1)
g_Player3 = World_GetPlayerAt(2)
g_TunnelDelay = 8
g_EntryCount = 0
g_ExitCount = 0
g_SimulCount = 0
t_Tunnel1Queue = { }
t_Tunnel2Queue = { }

-------------------------------------------------
--[[ ON INITIALIZATION ]]
-------------------------------------------------

function OnInit()
	
	--[[ START THE MUSIC ]]
	-- call the function to load the jukebox with tunes]]
	Rule_AddInterval( Rule_Tunnel1, 1 )
	Rule_AddIntervalDelay( Rule_Tunnel2, 1, 0.5 ) -- delay the second tunnel to ensure they run at different times. This makes the queuing simpler
	Rule_SetupMusicPlaylist()
	
end

--[[ the Scar_AddInit(OnInit) function is mandatory! This registers your init function with scar. ]]
Scar_AddInit(OnInit)

-------------------------------------------------
--[[ TUNNELS ]]
-------------------------------------------------
function Rule_Tunnel1()
--[[gets any squads near to the tunnel entrance and moves them to the tunnel exit]]
	if Player_AreSquadsNearMarker( g_Player1, "mkr_insideTunnel1" ) 
		or Player_AreSquadsNearMarker( g_Player2, "mkr_insideTunnel1" )
		or Player_AreSquadsNearMarker( g_Player3, "mkr_insideTunnel1" )
	then
		-- get the squads and despawn them
		Player_GetAllSquadsNearMarker( g_Player1, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel1" )
		Player_GetAllSquadsNearMarker( g_Player2, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel1" )
		Player_GetAllSquadsNearMarker( g_Player3, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel1" )
		SGroup_DeSpawn( "sg_tunnel"..g_EntryCount )
		g_EntryCount = g_EntryCount+1
		table.insert(t_Tunnel1Queue, 0)
	end
	
	local numQueuing = table.getn(t_Tunnel1Queue)
	if numQueuing > 0 then
		-- loop through table, increasing all values by 1
		for i = 1, numQueuing do
			t_Tunnel1Queue[i] = t_Tunnel1Queue[i] + 1
		end
		
		-- spawns the next squad if it's been in long enough
		if t_Tunnel1Queue[1] >= g_TunnelDelay then
			SGroup_ReSpawnMarker( "sg_tunnel"..g_ExitCount, "mkr_outsideTunnel1" )
			SGroup_Destroy( SGroup_FromName("sg_tunnel"..g_ExitCount) )
			g_ExitCount = g_ExitCount+1
			table.remove(t_Tunnel1Queue, 1)
		end
	end	
end


function Rule_Tunnel2()
--[[gets any squads near to the tunnel entrance and moves them to the tunnel exit]]
	if Player_AreSquadsNearMarker( g_Player1, "mkr_outsideTunnel2" ) 
		or Player_AreSquadsNearMarker( g_Player2, "mkr_outsideTunnel2" )
		or Player_AreSquadsNearMarker( g_Player3, "mkr_outsideTunnel2" )
	then
		-- get the squads and despawn them
		Player_GetAllSquadsNearMarker( g_Player1, "sg_tunnel"..g_EntryCount, "mkr_outsideTunnel2" )
		Player_GetAllSquadsNearMarker( g_Player2, "sg_tunnel"..g_EntryCount, "mkr_outsideTunnel2" )
		Player_GetAllSquadsNearMarker( g_Player3, "sg_tunnel"..g_EntryCount, "mkr_outsideTunnel2" )
		SGroup_DeSpawn( "sg_tunnel"..g_EntryCount )
		g_EntryCount = g_EntryCount+1
		table.insert(t_Tunnel2Queue, 0)
	end
	
	local numQueuing = table.getn(t_Tunnel2Queue)
	if numQueuing > 0 then
		-- loop through table, increasing all values by 1
		for i = 1, numQueuing do
			t_Tunnel2Queue[i] = t_Tunnel2Queue[i] + 1
		end
		
		-- spawns the next squad if it's been in long enough
		if t_Tunnel2Queue[1] >= g_TunnelDelay then
			SGroup_ReSpawnMarker( "sg_tunnel"..g_ExitCount, "mkr_insideTunnel2" )
			SGroup_Destroy( SGroup_FromName("sg_tunnel"..g_ExitCount) )
			g_ExitCount = g_ExitCount+1
			table.remove(t_Tunnel2Queue, 1)
		end
	end	
end

	
-------------------------------------------------
--[[ MUSIC ]]
-------------------------------------------------

function Rule_SetupMusicPlaylist()

	t_ambient = {"cloche-vent" }
	
--~ 	
--~ 	
--~ 		"cloche-vent",

		
		
	Playlist_Manager( PC_Ambient, t_ambient, true , true , {5, 10})
	
end
